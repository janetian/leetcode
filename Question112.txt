112. Path Sum

Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.
For example:
Given the below binary tree and sum = 22,

              5
             / \
            4   8
           /   / \
          11  13  4
         /  \      \
        7    2      1

return true, as there exist a root-to-leaf path 5->4->11->2 which sum is 22.

Answer: 
// using recursion
class Solution {
public:
    bool hasPathSum(TreeNode* root, int sum) 
    {
        // check for termination condition(have we reached the node we want to ?
        if (root == NULL)
        {
            return false;
        }
        
		if (root->val == sum && root->left == NULL && root->right == NULL)
		{
			return true;
		}

		//visit all of current's unvisited neighbors by calling dfs(neighbor)
		return (hasPathSum(root->left, sum - root->val) || hasPathSum(root->right, sum - root->val));
        
    }
};

// using stack

class Solution {
public:
    bool hasPathSum(TreeNode* root, int sum) 
    {
		if (root == NULL)
		{
		    return false;
		}
		
		stack<TreeNode*> s;
		s.push(root);
		while (s.empty() == false)
		{
			TreeNode* top = s.top();
			s.pop();

			// check for termination condition(have we reached the node we want to ?
			if (top->val == sum && top->left == NULL && top->right == NULL)
			{
				return true;
			}

			//add all of top's neighbors to the stack.
			if (top->left)
			{
				top->left->val += top->val;
				s.push(top->left);
			}
			if (top->right)
			{
				top->right->val += top->val;
				s.push(top->right);
			}
		}
		return false;
	}
        
};