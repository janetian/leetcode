1. Two Sum

Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution.

Example:

Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].


Answer:

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) 
    {
        vector<int> result;
    	unordered_map<int, int> um;  // first int is the value, second int is the index
    								 // add the array to the unorded_map
        for (int i = 0; i < nums.size(); i++)
	    {
    		unordered_map<int, int>::const_iterator found = um.find(target - nums[i]);
    		if (found != um.end()) // found
    		{
    			result.push_back(um[target - nums[i]]);
    			result.push_back(i);
    			return result;
    		}
    		else
    		{
    			um[nums[i]] = i;
    		}
	    }
	    return result;
    }
};
