107. Binary Tree Level Order Traversal II

Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7

return its bottom-up level order traversal as:

[
  [15,7],
  [9,20],
  [3]
]


Answer:

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) 
    {
        vector<vector<int> > result;
		if (root == NULL)
		{
			return result;
		}

		queue<TreeNode*> myQueue;
		stack<vector<int>> myStack;
		myQueue.push(root);
		while (myQueue.empty() == false)
		{
			vector<int> level;
			int numberOfNode_level = myQueue.size();
			while (numberOfNode_level > 0)
			{
				TreeNode* top = myQueue.front();
				myQueue.pop();
				numberOfNode_level--;
				level.push_back(top->val);
				if (top->left != NULL)
				{
					myQueue.push(top->left);
				}
				if (top->right != NULL)
				{
					myQueue.push(top->right);
				}
			}
			myStack.push(level);
		}

		while (!myStack.empty())
		{
			result.push_back(myStack.top());
			myStack.pop();
		}
		
		return result;
	}
};