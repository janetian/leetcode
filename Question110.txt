110. Balanced Binary Tree

Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1. 


Answer:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
	int maxDepth(TreeNode* root)
	{
		if (root == NULL)
		{
			return 0;
		}
		int left, right;
		if (root->left == NULL)
		{
			left = 1;
		}
		else
		{
			left = 1 + maxDepth(root->left);
		}
		if (root->right == NULL)
		{
			right = 1;
		}
		else
		{
			right = 1 + maxDepth(root->right);
		}
		return max(left, right);
	}
	bool isBalanced(TreeNode* root)
	{
		if (root == NULL)
		{
			return true;
		}
	    int left = maxDepth(root->left);
		int right = maxDepth(root->right);
		if (abs(left - right) <= 1 && isBalanced(root->left) && isBalanced(root->right))
		{
			return true;
		}
		else
		{
			return false;
		}
	}
};