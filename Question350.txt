350. Intersection of Two Arrays II 

 Given two arrays, write a function to compute their intersection.

Example:
Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2, 2].

Note:

    Each element in the result should appear as many times as it shows in both arrays.
    The result can be in any order.


Answer:

// using sort
class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) 
    {
        
        vector<int> result;
	int i = 0;
	int j = 0;
	sort(nums1.begin(), nums1.end());
	sort(nums2.begin(), nums2.end());
	while(i < nums1.size() && j < nums2.size())
	{
		if (nums1[i] == nums2[j])
		{
			result.push_back(nums1[i]);
			i++;
			j++;
		}
		else if (nums1[i] < nums2[j])
		{
			i++;
		}
		else
		{
			j++;
		}
	}
	return result;
       
    }
};

// using unorded_map
vector<int> intersection(vector<int>& nums1, vector<int>& nums2)
{
	vector<int> result;
	unordered_map<int, int> myMap;
	for (int i = 0; i < nums1.size(); i++)
	{
		myMap[nums1[i]]++;
	}
	for (int i = 0; i < nums2.size(); i++)
	{
		if (myMap.find(nums2[i]) != myMap.end() && --myMap[nums2[i]] >= 0)
		{
			result.push_back(nums2[i]);
		}
	}
	return result;
}